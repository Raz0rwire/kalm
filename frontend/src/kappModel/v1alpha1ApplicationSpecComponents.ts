/**
 * Kapp Models
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1alpha1ApplicationSpecConfigs } from './v1alpha1ApplicationSpecConfigs';
import { V1alpha1ApplicationSpecEnv } from './v1alpha1ApplicationSpecEnv';
import { V1alpha1ApplicationSpecLivenessProbe } from './v1alpha1ApplicationSpecLivenessProbe';
import { V1alpha1ApplicationSpecPorts } from './v1alpha1ApplicationSpecPorts';
import { V1alpha1ApplicationSpecVolumes } from './v1alpha1ApplicationSpecVolumes';

export class V1alpha1ApplicationSpecComponents {
    'afterStart'?: Array<string>;
    'args'?: Array<string>;
    'beforeDestroy'?: Array<string>;
    'beforeStart'?: Array<string>;
    'command'?: Array<string>;
    'configs'?: Array<V1alpha1ApplicationSpecConfigs>;
    'cpu'?: string;
    'dependencies'?: Array<string>;
    /**
    * DNSPolicy defines how a pod\'s DNS will be configured.
    */
    'dnsPolicy'?: string;
    'env'?: Array<V1alpha1ApplicationSpecEnv>;
    'image': string;
    'livenessProbe'?: V1alpha1ApplicationSpecLivenessProbe;
    'memory'?: string;
    'name': string;
    'plugins'?: Array<object>;
    'ports'?: Array<V1alpha1ApplicationSpecPorts>;
    'readinessProbe'?: V1alpha1ApplicationSpecLivenessProbe;
    'replicas'?: number;
    /**
    * RestartPolicy describes how the container should be restarted. Only one of the following restart policies may be specified. If none of the following policies is specified, the default one is RestartPolicyAlways.
    */
    'restartPolicy'?: string;
    'restartStrategy'?: string;
    'schedule'?: string;
    'terminationGracePeriodSeconds'?: number;
    'volumes'?: Array<V1alpha1ApplicationSpecVolumes>;
    'workloadType'?: WorkloadTypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "afterStart",
            "baseName": "afterStart",
            "type": "Array<string>"
        },
        {
            "name": "args",
            "baseName": "args",
            "type": "Array<string>"
        },
        {
            "name": "beforeDestroy",
            "baseName": "beforeDestroy",
            "type": "Array<string>"
        },
        {
            "name": "beforeStart",
            "baseName": "beforeStart",
            "type": "Array<string>"
        },
        {
            "name": "command",
            "baseName": "command",
            "type": "Array<string>"
        },
        {
            "name": "configs",
            "baseName": "configs",
            "type": "Array<V1alpha1ApplicationSpecConfigs>"
        },
        {
            "name": "cpu",
            "baseName": "cpu",
            "type": "string"
        },
        {
            "name": "dependencies",
            "baseName": "dependencies",
            "type": "Array<string>"
        },
        {
            "name": "dnsPolicy",
            "baseName": "dnsPolicy",
            "type": "string"
        },
        {
            "name": "env",
            "baseName": "env",
            "type": "Array<V1alpha1ApplicationSpecEnv>"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "livenessProbe",
            "baseName": "livenessProbe",
            "type": "V1alpha1ApplicationSpecLivenessProbe"
        },
        {
            "name": "memory",
            "baseName": "memory",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "plugins",
            "baseName": "plugins",
            "type": "Array<object>"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<V1alpha1ApplicationSpecPorts>"
        },
        {
            "name": "readinessProbe",
            "baseName": "readinessProbe",
            "type": "V1alpha1ApplicationSpecLivenessProbe"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "restartPolicy",
            "baseName": "restartPolicy",
            "type": "string"
        },
        {
            "name": "restartStrategy",
            "baseName": "restartStrategy",
            "type": "string"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "string"
        },
        {
            "name": "terminationGracePeriodSeconds",
            "baseName": "terminationGracePeriodSeconds",
            "type": "number"
        },
        {
            "name": "volumes",
            "baseName": "volumes",
            "type": "Array<V1alpha1ApplicationSpecVolumes>"
        },
        {
            "name": "workloadType",
            "baseName": "workloadType",
            "type": "WorkloadTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return V1alpha1ApplicationSpecComponents.attributeTypeMap;
    }
}


export enum WorkloadTypeEnum {
        Server = 'server',
        Cronjob = 'cronjob'
    }