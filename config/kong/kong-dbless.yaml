apiVersion: v1
kind: Namespace
metadata:
  name: kapp-kong
---
apiVersion: core.kapp.dev/v1alpha1
data: |
  # Prometheus metrics server
  server {
      server_name kong_prometheus_exporter;
      listen 0.0.0.0:9542; # can be any other port as well
      access_log off;

      location /metrics {
          default_type text/plain;
          content_by_lua_block {
               local prometheus = require "kong.plugins.prometheus.exporter"
               prometheus:collect()
          }
      }

      location /nginx_status {
          internal;
          stub_status;
      }
  }
  # Health check server
  server {
      server_name kong_health_check;
      listen 0.0.0.0:9001; # can be any other port as well

      access_log off;
      location /health {
        return 200;
      }
  }
kind: File
metadata:
  name: servers.conf
  namespace: kapp-kong
---
apiVersion: core.kapp.dev/v1alpha1
kind: Application
metadata:
  name: ingress-kong
  namespace: kapp-kong
spec:
  components:
    - name: kong-dbless
      image: kong:1.4
      beforeStart:
        - ls -alh /
        - ls -alh /kong
        - ls -alh /tmp
      beforeDestroy:
        - /bin/sh
        - -c
        - kong quit
      volumeMounts:
        - mountPath: /kong/servers.conf
          name: servers-conf
      resources:
        cpu:
          min: 500m
          max: 1000m
        memory:
          min: 500M
          max: 2G
      env:
        - name: KONG_DATABASE
          value: 'off'
        - name: KONG_NGINX_WORKER_PROCESSES
          value: '1'
        - name: KONG_NGINX_HTTP_INCLUDE
          value: /kong/servers.conf
        - name: KONG_ADMIN_ACCESS_LOG
          value: /dev/stdout
        - name: KONG_ADMIN_ERROR_LOG
          value: /dev/stderr
        - name: KONG_ADMIN_LISTEN
          value: 127.0.0.1:8444 ssl
        - name: KONG_PROXY_LISTEN
          value: 0.0.0.0:8000, 0.0.0.0:8443 ssl http2
  volumes:
    - name: servers-conf
      configMap:
        name: servers.conf
