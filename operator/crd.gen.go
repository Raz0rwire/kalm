// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// tmp/crd.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xcd\x6f\xdc\x3a\x0e\xbf\xcf\x5f\x41\x74\x0f\xbd\xac\x3d\x33\x6d\x80\x0d\x0c\xe4\xd0\x4d\x17\x45\xd1\x8f\x0d\x92\xa2\x97\xc5\x1e\x34\x32\xc7\xa3\x17\x7d\x3d\x8a\x9e\x36\xfd\xeb\x1f\x24\xd9\x1e\x7b\xbe\xda\xa4\xed\xe1\x39\x87\xd8\x14\x45\xfe\xf4\x23\x45\x4a\x23\xbc\xfa\x8c\x14\x94\xb3\x15\x6c\x97\xb3\x7b\x65\xeb\x0a\x3e\x0a\x83\xc1\x0b\x89\x33\x83\x2c\x6a\xc1\xa2\x9a\x01\x68\xb1\x42\x1d\xe2\x1b\x80\x74\x96\xc9\xe9\xc2\x6b\x61\xb1\x02\xe7\x91\x04\x3b\x9a\x01\x58\x61\xb0\x82\x7b\xe1\x7d\x11\x1e\x02\xa3\x99\x15\x45\x31\x1b\xbb\x11\x5e\xe1\x57\x46\x1b\xbf\x42\x79\x7f\x19\x4a\xe5\xe6\xdb\xe5\x0a\x59\xf4\x00\xae\xdb\xc0\xce\xdc\x62\x70\x2d\x49\x7c\x8d\x6b\x65\x15\x2b\x67\x27\x78\x84\xb5\x8e\x45\x14\x4f\x41\x69\xa4\xa2\x41\x5b\xde\xb7\x2b\x5c\xb5\x4a\xd7\x48\xc9\xc3\xb0\xcc\x45\xf9\xa2\xbc\x98\x01\x48\xc2\x34\xfd\x93\x32\x18\x58\x18\x5f\x81\x6d\xb5\x9e\x2c\xa2\x5f\x99\x74\x76\xad\x9a\x50\x2a\x1b\x58\x68\x5d\xc6\xb1\xb2\xc6\xed\x2c\x78\x94\xd1\x7d\x43\xae\xf5\x15\x1c\x8c\x67\x63\x1d\xc2\xbc\xba\x77\xc2\xfb\xff\x76\x76\xaf\x93\xdd\x34\xa8\x55\xe0\x77\x27\x14\xde\xab\xc0\x49\xc9\xeb\x96\x84\x3e\x8a\x2d\x8d\x07\x65\x9b\x56\x0b\x3a\xa6\x31\x03\x08\xd2\x79\x1c\x05\xb8\x9e\x01\x6c\x85\x56\x75\x22\x22\x83\x74\x1e\xed\xab\x9b\xb7\x9f\x5f\xde\xc9\x0d\x1a\x91\x85\x00\x35\x06\x49\xca\x27\xbd\x23\x08\x41\x05\xe0\x0d\x42\x9e\x04\x6b\x47\xe9\xf3\x08\x4e\x78\x75\xf3\xb6\xb3\xe9\x29\x8e\xb1\xea\xf9\x89\xcf\x28\x55\x06\xd9\x9e\xf7\xe7\x11\x5e\xd6\x81\x3a\x26\x07\x66\xdf\x5d\x88\xb1\x86\x90\x51\xb8\x35\xf0\x46\x05\x20\xf4\x84\x01\x6d\x4e\x97\x91\x59\x88\x2a\xc2\x82\x5b\xfd\x81\x92\x4b\xb8\x43\x8a\x46\x20\x6c\x5c\xab\xeb\x98\x51\x5b\x24\x06\x42\xe9\x1a\xab\xbe\x0d\x96\x03\xb0\x4b\x2e\xb5\x60\xec\x42\xd3\x3f\xca\x32\x92\x15\x3a\x12\xdb\xe2\x3f\x41\xd8\x1a\x8c\x78\x00\xc2\xe8\x03\x5a\x3b\xb2\x96\x54\x42\x09\x1f\x1c\x21\x28\xbb\x76\x15\x6c\x98\x7d\xa8\xe6\xf3\x46\x71\xbf\x39\xa4\x33\xa6\xb5\x8a\x1f\xe6\x29\xc5\xd5\xaa\x65\x47\x61\x5e\xe3\x16\xf5\x3c\xa8\xa6\x10\x24\x37\x8a\x51\x72\x4b\x38\x17\x5e\x15\x09\xb8\x4d\x7b\xa3\x34\xf5\x3f\xa8\xdb\x49\xe1\xf9\x08\x29\x3f\xc4\x54\x08\x4c\xca\x36\x83\x38\x65\xe8\x49\xde\x63\x7a\xc6\x40\x8b\x6e\x5a\xc6\xbf\xa3\x37\x8a\x22\x2b\xb7\xff\xb9\xfb\x04\xbd\xd3\x14\x82\x29\xe7\x89\xed\xdd\xb4\xb0\x23\x3e\x12\xa5\xec\x1a\x29\x07\x6e\x4d\xce\x24\x8b\x68\x6b\xef\x94\xe5\xf4\x21\xb5\x42\x3b\x25\x3d\xb4\x2b\xa3\x38\x46\xfa\xcf\x16\x03\xc7\xf8\x94\x70\x9d\x4a\x04\xac\x10\x5a\x5f\x0b\xc6\xba\x84\xb7\x16\xae\x85\x41\x7d\x2d\x02\xfe\x76\xda\x23\xc3\xa1\x88\x94\x7e\x9f\xf8\x71\x65\x9b\x2a\x66\xb6\x06\x71\x5f\x70\x8e\x46\xe8\x70\x5f\xde\x79\x94\x93\x4d\x52\x63\x50\x14\x13\x99\x05\x63\x4c\xff\x13\xe5\xe8\x1c\x04\x16\xdc\x86\xc7\x80\x48\x13\x26\x30\xdc\x2a\xc4\x90\xff\x04\x8e\x3d\xd1\xae\xbe\x2f\x85\xf6\x1b\xb1\xdc\xc9\x12\xd4\xa2\xab\xea\xa3\x61\x80\x8c\xa1\x02\xa6\x16\xb3\x80\x1d\x89\x06\x3b\xc9\x6e\xa1\x42\x4a\xf4\x8c\xf5\xc7\xfd\x62\xfe\xec\xd9\xa4\x2e\xa7\x4f\xe9\x6c\xad\x72\x63\x82\xff\xfd\x7f\x96\xad\x62\xfd\xb9\x47\x13\x85\xfb\x5d\x91\x56\x42\x96\xa2\xe5\x8d\x23\xf5\x2d\x95\xa9\x5d\x6b\xec\xba\xe2\xad\xd3\xd3\x8e\x3c\xea\xb5\x1a\x45\x8d\x54\xa0\x46\x19\xe7\x16\x14\x75\xbb\xde\x13\x0b\xfd\xb4\x25\x53\xab\xe3\x2a\x8a\x58\x6c\xdf\xc4\xc6\xd5\x31\x94\xd0\x0f\xc5\x22\xcb\x72\xd5\x36\xc2\x87\x4c\xe8\xaa\x93\x37\xc8\xe9\xbf\xce\xad\xa9\x80\x2f\x82\xe5\x26\x4f\x89\x8d\x15\xd3\x6b\xde\x78\xe9\xd5\x0f\xe3\x35\x6a\x64\x7c\xac\xfb\x79\x8e\xc6\x71\x14\x07\x7e\x7e\xc8\x38\xc6\xdd\xba\x67\xb1\x03\xff\x84\xf8\x5c\xeb\x36\x30\xd2\x41\x98\x7e\xe4\x9c\x51\x18\x61\x45\x83\x94\x03\x77\x2a\x3e\x47\x4e\x17\x7b\x2b\x3a\x7e\x2e\x38\x5c\xde\x28\x0c\x47\x83\xb9\x0b\xd6\x88\xd9\x2f\xc7\x99\x7d\x12\xaa\xb3\xd1\x3c\xf0\xfe\x0b\xa3\x31\xe2\xdc\x93\xfb\xfa\x70\x9e\xf1\xe8\x23\x56\x74\x39\x76\x72\xb8\x40\x76\xf7\x68\x09\xb7\x0a\xbf\x9c\x48\xa7\x63\x86\xf7\xc1\x1f\xda\x0d\x6d\x2a\x6f\xb1\xfa\x84\x70\xd6\xfe\xd3\xca\xc9\xbf\x95\xad\x63\x17\x7a\x44\x55\x59\x75\x53\x4e\x17\x17\xa7\xf1\x16\xd7\xa9\x6a\x76\x6b\x3e\x83\x67\xd6\x17\xd2\xdb\x5d\xc5\x3a\x57\xd3\x3a\x46\x52\xac\xf2\xc4\x78\x74\x50\x12\x5f\x49\xe9\xda\x74\x2a\xc8\x26\x6a\x5c\x8b\x56\xf3\x69\x9c\x3f\x97\x53\xdf\x61\x6e\xbc\x9d\x7b\xc6\x9e\x48\xcc\x38\x91\x4f\x97\x8c\xbf\x09\x2f\xbb\x2d\xf7\xbb\x58\x19\x6d\xea\xdf\xc7\xc9\xb0\xf2\xce\xe0\xcf\x5d\x94\x7b\x69\x61\x90\x49\xc9\x50\x84\xce\xea\x49\x3c\xfd\x21\xd0\x3b\xe2\xc9\xe9\x26\x1d\x63\xf3\x89\xc4\x11\x57\x70\x79\x71\xf1\x32\x7d\xb2\xa0\x06\xf9\x26\x09\x7b\xa5\x90\xb6\x96\xa3\xf3\x50\x0f\xef\xef\x3e\xec\x42\xff\x1a\xbd\x76\x0f\x26\x9e\xc7\x7f\x09\x07\xdf\x5f\x33\xa1\xd7\x4a\x8a\x50\xc1\xf2\x60\x0d\x26\x36\x8e\xf7\x23\xdf\xe7\xbc\x33\x1a\x1f\xef\x6f\xdd\xd4\xbd\x03\xb8\x9e\x58\x39\x67\x67\x7a\x26\x8f\x7a\x42\x59\xa4\x61\x6e\x01\x82\x9a\x91\xa5\x02\x8a\x22\xa0\x6c\x09\x8b\xd8\x6f\xd1\x16\xa2\xae\x09\x43\xb8\x5a\x94\xe9\xaf\x1a\xa2\xd6\xab\xb7\x3e\x30\xa1\x30\x57\x31\x74\xd5\x7c\xbe\x7c\xf1\xaf\xa4\xba\xac\x2e\x17\x97\x8b\xf9\x44\x57\xbb\x86\x5d\xe0\x1a\x89\xae\x86\x73\x6d\x3f\xb8\xbd\x5a\x2e\x06\x81\x32\xe9\xa8\xdb\xc8\xf4\x03\xc9\xe8\xf7\x92\xf4\x5e\xc4\x4d\x98\xb7\x53\xb5\x5d\x94\x17\xe5\x72\x98\xd8\xc5\x6d\xaa\x34\x8c\x0e\x49\xd9\xbb\x1d\x28\xb9\x99\xe6\xe4\xd8\xd8\x2e\x71\x8f\x13\xd6\x6f\x8d\x48\xd5\xd5\x74\xf9\x13\x3d\xb4\x62\xa5\x71\xbf\x77\x8c\xa2\x68\x8c\x18\x5f\x71\x0b\x98\x77\x75\x74\x9f\x96\x9c\x7b\x2c\x1a\x65\x9b\x79\x1f\xee\x6a\xef\xc2\x9f\xc1\xef\x5b\x98\x74\xf1\xfe\xd1\x2a\xde\x50\xab\xc9\xb5\x55\xfa\xb6\x82\xe5\x62\x61\x26\x52\x83\xc6\xd1\x43\x05\x2f\x17\x1f\xd4\x68\xa0\xbf\xdb\x3e\xc6\xc4\x8b\x9d\x09\x46\x32\xca\xa6\x62\xfa\x86\x84\xc4\x1b\x24\xe5\xea\x3b\x8c\xb7\x95\xb8\x99\x16\xb3\xbf\x02\x00\x00\xff\xff\x70\x64\xe2\x76\x0d\x14\x00\x00")

func crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_crdYaml,
		"crd.yaml",
	)
}

func crdYaml() (*asset, error) {
	bytes, err := crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "crd.yaml", size: 5133, mode: os.FileMode(420), modTime: time.Unix(1588851524, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"crd.yaml": crdYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"crd.yaml": &bintree{crdYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
